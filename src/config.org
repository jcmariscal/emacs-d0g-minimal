* config
** autoload
#+begin_src elisp :noweb-ref autoload
;;;###autoload
#+end_src
** init
Defaults

#+begin_src elisp :noweb-ref init
(require 'package)
(add-to-list 'load-path (concat user-emacs-directory "elisp"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
(add-to-list 'package-archives  '("org" . "https://orgmode.org/elpa/"))

(add-hook 'prog-mode-hook #'hs-minor-mode)

(setq python-shell-interpreter "/usr/bin/python3")

;;Transform yes-or-no questions into y-or-n
(defalias 'yes-or-no-p 'y-or-n-p)
(setq confirm-kill-emacs #'y-or-n-p)
(setq gc-cons-threshold (* 100 1024 1024))
;; (fido-mode 1)
;; (setq inhibit-startup-screen t)
;; (setq inhibit-startup-echo-area-message t)
;; (setq inhibit-startup-message t)
;; (setq initial-scratch-message nil)
(setq initial-major-mode 'org-mode)
(setq-default indent-tabs-mode nil)
;; (setq pop-up-windows nil)
(tool-bar-mode 0)
(tooltip-mode  0)
(scroll-bar-mode 1)
(save-place-mode 1)

;; create custom file for emacs
(progn
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (with-temp-buffer (write-file custom-file)))
  (load custom-file))
#+end_src

** org-mode
#+begin_src  elisp :noweb-ref my-org-mode
;; set-up org-mode options
;; set variable to allow for inline-image resizing within org-mode for large images
(setq org-image-actual-width (list 900))
;; enables abbreviations such as <s for source code
;; enables easy templates again

(require 'org-tempo)

;; disable newline indentation
(add-hook 'org-mode-hook (lambda ()
                           (electric-indent-mode -1)))

;; disable company-mode in org
(setq company-global-modes '(not org-mode))

;; Some org-mode customization
(setq org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-src-preserve-indentation t
      ;; https://stackoverflow.com/questions/15773354/indent-code-in-org-babel-src-blocks
      org-src-tab-acts-natively t
      org-fontify-done-headline t
      org-log-done t
      org-tags-column 80)

;;;; strike through done headers in org-mode
;; (set-face-attribute 'org-headline-done nil :strike-through t)

;; active Babel languages

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)
   (octave . t)
   (emacs-lisp .t)))
#+end_src

** Packages

#+begin_src elisp :noweb-ref my-packages
(use-package evil
  :ensure t
  :init
  (add-hook 'with-editor-mode-hook 'evil-insert-state)
  :config
  (evil-mode 1)
  ;; enable tab key in vim normal mode in org-mode
  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
  (evil-define-key 'motion org-mode-map (kbd "TAB") #'org-cycle)
  (evil-define-key 'insert 'org-mode-map
    (kbd "S-<right>") 'org-shiftright
    (kbd "S-<left>") 'org-shiftleft)
  (define-key evil-motion-state-map (kbd "TAB") #'org-cycle)
  (define-key evil-normal-state-map (kbd "q") 'quit-window)
  (define-key evil-normal-state-map "gf" 'helm-find-files)
  (define-key evil-normal-state-map (kbd "q") 'quit-window)
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
  ;; set initial state in Info-mode as emacs
  (evil-set-initial-state 'Info-mode 'emacs))

(use-package magit
  :ensure t
  :config
  (setq git-commit-summary-max-length 50)
  (setq git-commit-fill-column 72)
  :bind
  ;; keybindings
  ("C-x g s" . magit-status)
  ("C-x g x" . magit-checkout)
  ("C-x g c" . magit-commit-create)
  ("C-x g p" . magit-push-other)
  ("C-x g u" . magit-pull-branch)
  ("C-x g e" . magit-ediff-resolve)
  ("C-x g r" . magit-rebase-interactive))

(use-package magit-popup
  :ensure t)

(use-package yasnippet
  :ensure t
  :config (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t)

(use-package yasnippet-classic-snippets
  :ensure t)

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner (my-choose-random-string (my-get-directory-files (concat (file-name-directory user-init-file) "res/asset/media/img/") "webp" "png" "jpeg"))))

(use-package helm
  :ensure t
  :config
  (setq helm-split-window-in-side-p t
        helm-split-window-default-side 'below
	helm-idle-delay 0.0
	helm-input-idle-delay 0.01
	helm-quick-update t
	helm-ff-skip-boring-files t)
  (helm-mode 1)
  :bind (("M-x" . helm-M-x)
         ("C-x C-m" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x v" . helm-projectile)
         ("C-x c o" . helm-occur)
         ("C-x c p" . helm-projectile-ag)
         ("C-x c k" . helm-show-kill-ring)
	 ("C-x r b" . helm-filtered-bookmarks)
         :map helm-map
         ("<tab>" . helm-execute-persistent-action)))

(use-package helm-ag
  :ensure t)

(use-package helm-git-grep
  :ensure t)

(use-package helm-swoop
  :ensure t
  :bind
  ("C-x c s" . helm-swoop))

(use-package helm-gtags
  :ensure t)

(use-package helm-org
  :ensure t)
#+end_src

** utilities

#+begin_src elisp :noweb-ref my-util
(defun my-get-directory-files (directory-path &rest extensions)
  "Returns a list of all files in DIRECTORY-PATH with one of EXTENSIONS."
  (let ((all-files (directory-files directory-path t nil t)))
    (seq-filter (lambda (file)
                  (let ((file-extension (file-name-extension file)))
                    (and file-extension
                         (member (downcase file-extension) extensions))))
                all-files)))
(defun my-choose-random-string (list)
  "Choose a random string from LIST."
  (if list
      (nth (random (length list)) list)
    nil))
#+end_src

* scripts
 :PROPERTIES:
 :header-args+: :tangle-mode (identity #o664)
 :header-args+: :noweb yes
 :header-args+: :comments link
 :header-args+: :mkdirp yes
 :END:
** init.el

#+begin_src elisp :tangle ../init.el
<<init>>
(require 'my-util)
(require 'my-packages)
(require 'my-org)
#+end_src

** elisp/my-util.el

#+begin_src elisp :tangle ../elisp/my-util.el
<<my-util>>
(provide 'my-util)
#+end_src

** elisp/packages.el

#+begin_src elisp :tangle ../elisp/my-packages.el
<<my-packages>>
(provide 'my-packages)
#+end_src

** elisp/org.el

#+begin_src elisp :tangle ../elisp/my-org.el
<<my-org>>
(provide 'my-org)
#+end_src
